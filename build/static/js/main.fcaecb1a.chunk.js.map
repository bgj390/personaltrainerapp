{"version":3,"sources":["components/Trainings.js","components/AddCustomer.js","components/EditCustomer.js","components/AddTraining.js","components/Customers.js","components/TrainingsCalendar.js","components/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Trainings","useState","trainings","setTrainings","open","setOpen","msg","setMsg","id","setId","gridRef","useRef","useEffect","getTrainings","fetch","then","response","json","data","catch","err","console","error","newDate","Date","today","moment","toISOString","columns","headerName","field","sortable","filter","valueFormatter","params","value","format","cellStyle","isSameOrBefore","color","backgroundColor","width","cellRendererFramework","row","Button","size","onClick","link","window","confirm","method","_","current","refreshCells","rowNodes","className","style","height","margin","ref","suppressCellSelection","onGridReady","api","columnDefs","rowData","pagination","paginationPageSize","animateRows","Snackbar","autoHideDuration","onClose","message","AddCustomer","props","customer","setCustomer","handleClose","inputChanged","event","target","name","variant","Dialog","aria-labelledby","DialogTitle","DialogContent","TextField","firstname","onChange","label","fullWidth","lastname","streetaddress","postcode","city","email","phone","DialogActions","addCustomer","EditCustomer","updateCustomer","AddTraining","date","duration","activity","training","setTraining","log","utils","DateFnsUtils","DatePicker","addTraining","links","href","Customers","customers","setCustomers","getCustomers","content","headers","body","JSON","stringify","newTraining","newCustomer","TrainingsCalendar","localizer","momentLocalizer","map","title","start","utc","_d","end","add","resource","defaultDate","defaultView","events","resourceAccessor","startAccessor","endAccessor","Stats","setData","fetchData","mins","domainPadding","fill","x","y","App","setValue","AppBar","position","Toolbar","Typography","Tabs","centered","Tab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcaecb1a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport moment from 'moment';\nimport { Button } from '@material-ui/core';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\n\nfunction Trainings() {\n\n    const [trainings, setTrainings] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [msg, setMsg] = useState('');\n    const [id, setId] = useState('');\n\n    const gridRef = useRef();\n\n    useEffect(() => {\n        getTrainings();\n    }, [])\n\n    const getTrainings = () => {\n        fetch('https://customerrest.herokuapp.com/gettrainings')\n        .then(response => response.json())\n        .then(data => setTrainings(data))\n        .catch(err => console.error(err))\n    }\n\n    const deleteTraining = (link) => {\n        setId(id);\n        if (window.confirm('You really want to delete?')) {\n            fetch('https://customerrest.herokuapp.com/api/trainings/' + link.id, {\n                method: 'DELETE'\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getTrainings()}))\n            .then(_ => setMsg('Deleted!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n\n    const closeSnackbar = () => {\n        setOpen(false);\n    }\n\n    let newDate = new Date();\n    let today = moment(newDate).toISOString();\n\n    const columns = [\n        { headerName: 'Id', field: 'id', sortable: 'true' },\n        { headerName: 'First name', field: 'customer.firstname', sortable: true, filter: true },\n        { headerName: 'Last name', field: 'customer.lastname', sortable: true, filter: true },\n        { headerName: 'Date', field: 'date', sortable: true, filter: true,\n            valueFormatter: function (params) {\n            return moment(params.value).format('DD.MM.YYYY');\n            },\n            cellStyle: function(params) {\n                if (moment(params.value).isSameOrBefore(today, 'day')) {\n                    return {color: 'white', backgroundColor: 'red'};\n                } else {\n                    return {color: 'black', backgroundColor: 'lime'};\n                }\n            }\n        },\n        { headerName: 'Duration (min)', field: 'duration', sortable: true, filter: true}, \n        { headerName: 'Activity', field: 'activity', sortable: true, filter: true },      \n        {\n            headerName: '',\n            field: 'data',\n            width: 90,\n            cellRendererFramework: (row) => (\n                <Button color=\"secondary\" size=\"small\"\n                onClick={() => deleteTraining(row.data)}>\n                    Delete\n                </Button>\n            )\n        },\n    ]\n\n    return(\n        <div>\n            <div className=\"ag-theme-material\" style={{height:'700px', width:'90%', margin:'auto'}}>\n            <AgGridReact\n                ref={gridRef}\n                suppressCellSelection={true}\n                onGridReady={ params => {\n                    gridRef.current = params.api\n                }}\n                columnDefs={columns}\n                rowData={trainings}\n                pagination={true}\n                paginationPageSize={10}\n                animateRows={true}\n            >\n            </AgGridReact>\n            <Snackbar\n                open={open}\n                autoHideDuration={3000}\n                onClose={closeSnackbar}\n                message={msg}\n            /> \n            </div>\n        </div>\n    )\n}\n\nexport default Trainings;","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction AddCustomer(props) {\n    const [customer, setCustomer] = useState({});\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n      };\n    \n      const handleClose = () => {\n        setOpen(false);\n      };\n\n      const handleSave = () => {\n          props.addCustomer(customer);\n          handleClose();\n      };\n\n      const inputChanged = (event) => {\n          setCustomer({...customer, [event.target.name]: event.target.value});\n      }\n\n      return (\n          <div>\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                Add customer\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">New customer</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        margin=\"dense\"\n                        name=\"firstname\"\n                        value={customer.firstname}\n                        onChange={inputChanged}\n                        label=\"First name\"\n                        fullWidth\n                    />  \n                    <TextField\n                        margin=\"dense\"\n                        name=\"lastname\"\n                        value={customer.lastname}\n                        onChange={inputChanged}\n                        label=\"Last name\"\n                        fullWidth\n                    /> \n                    <TextField\n                        margin=\"dense\"\n                        name=\"streetaddress\"\n                        value={customer.streetaddress}\n                        onChange={inputChanged}\n                        label=\"Street address\"\n                        fullWidth\n                    /> \n                    <TextField\n                        margin=\"dense\"\n                        name=\"postcode\"\n                        value={customer.postcode}\n                        onChange={inputChanged}\n                        label=\"Post code\"\n                        fullWidth\n                    />   \n                    <TextField\n                        margin=\"dense\"\n                        name=\"city\"\n                        value={customer.city}\n                        onChange={inputChanged}\n                        label=\"City\"\n                        fullWidth\n                    /> \n                    <TextField\n                        margin=\"dense\"\n                        name=\"email\"\n                        value={customer.email}\n                        onChange={inputChanged}\n                        label=\"email\"\n                        fullWidth\n                    /> \n                    <TextField\n                        margin=\"dense\"\n                        name=\"phone\"\n                        value={customer.phone}\n                        onChange={inputChanged}\n                        label=\"Phone\"\n                        fullWidth\n                    /> \n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSave} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n          </div>\n      );\n}\n\nexport default AddCustomer;","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction EditCustomer(props) {\n\n    const [customer, setCustomer] = useState({firstname: '', lastname: '', streetaddress: '', postcode: '', city: '', email: '', phone: ''});\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setCustomer({\n            firstname: props.customer.firstname,\n            lastname: props.customer.lastname,\n            streetaddress: props.customer.streetaddress,\n            postcode: props.customer.postcode,\n            city: props.customer.city,\n            email: props.customer.email,\n            phone: props.customer.phone,\n        })\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = () => {\n        props.updateCustomer(props.customer, customer);\n        handleClose();\n    };\n\n    const inputChanged = (event) => {\n        setCustomer({...customer, [event.target.name]: event.target.value});\n    };\n\n    return (\n        <div>\n            <Button color=\"primary\" onClick={handleClickOpen}>\n                Edit\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit customer</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        margin=\"dense\"\n                        name=\"firstname\"\n                        value={customer.firstname}\n                        onChange={inputChanged}\n                        label=\"First name\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"lastname\"\n                        value={customer.lastname}\n                        onChange={inputChanged}\n                        label=\"Last name\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"streetaddress\"\n                        value={customer.streetaddress}\n                        onChange={inputChanged}\n                        label=\"Street address\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"postcode\"\n                        value={customer.postcode}\n                        onChange={inputChanged}\n                        label=\"Post code\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"city\"\n                        value={customer.city}\n                        onChange={inputChanged}\n                        label=\"City\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"email\"\n                        value={customer.email}\n                        onChange={inputChanged}\n                        label=\"email\"\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        name=\"phone\"\n                        value={customer.phone}\n                        onChange={inputChanged}\n                        label=\"Phone\"\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSave} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default EditCustomer;","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { \n    MuiPickersUtilsProvider,\n    DatePicker } from '@material-ui/pickers';\nimport moment from 'moment';\n\nfunction AddTraining(props) {\n    const [training, setTraining] = useState({customer: '', date: '', duration: '', activity: ''});\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        console.log(props.training);       \n        setOpen(true);\n    };\n   \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = () => {\n        props.addTraining({...training, customer: props.training.links[0].href});\n        handleClose();\n    };\n\n    const inputChanged = (event) => {\n        setTraining({...training, [event.target.name]: event.target.value});\n    }\n\n    const handleDateChange = (date) => {\n        setTraining({...training, date: moment(date).toISOString()})\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                Add training\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">New training</DialogTitle>\n                <DialogContent>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <DatePicker \n                            format=\"dd.MM.yyyy\" \n                            value={training.date}\n                            onChange={handleDateChange} />\n                        <TextField\n                            margin=\"dense\"\n                            name=\"duration\"\n                            value={training.duration}\n                            onChange={inputChanged}\n                            label=\"Duration (min)\"\n                            fullWidth\n                        />   \n                        <TextField\n                            margin=\"dense\"\n                            name=\"activity\"\n                            value={training.activity}\n                            onChange={inputChanged}\n                            label=\"Activity\"\n                            fullWidth\n                        />\n                    </MuiPickersUtilsProvider>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSave} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n          </div>\n      );\n}\n\nexport default AddTraining;","import React, { useState, useEffect, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport { Button } from '@material-ui/core';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport AddCustomer from './AddCustomer';\nimport EditCustomer from './EditCustomer';\nimport AddTraining from './AddTraining';\nimport Trainings from './Trainings';\n\nfunction Customers() {\n\n    const [customers, setCustomers] = useState([]);\n    const [trainings, setTrainings] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [msg, setMsg] = useState('');\n\n    const gridRef = useRef();\n\n    useEffect(() => {\n        getCustomers();\n    }, [])\n\n    const getCustomers = () => {\n        fetch('https://customerrest.herokuapp.com/api/customers/')\n        .then(response => response.json())\n        .then(data => setCustomers(data.content))\n        .catch(err => console.error(err))\n    }\n\n    useEffect(() => {\n        getTrainings();\n    }, [])\n    \n    const getTrainings = () => {\n        fetch('https://customerrest.herokuapp.com/api/trainings')\n        .then(response => response.json())\n        .then(data => setTrainings(data))\n        .catch(err => console.error(err))\n    }\n\n    const addCustomer = (newCustomer) => {\n        fetch('https://customerrest.herokuapp.com/api/customers/', {\n            method: 'POST',\n            headers: {'Content-type' : 'application/json' },\n            body: JSON.stringify(newCustomer)\n        })\n        .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n        .then(_ => setMsg('Added succesfully!'))\n        .then(_ => setOpen(true))\n        .catch(err => console.error(err))\n    }\n\n    const updateCustomer = (link, customer) => {\n        if (window.confirm('You really want to update?')) {\n            fetch(link.links[0].href, {\n                method: 'PUT',\n                headers: {'Content-type' : 'application/json' },\n                body: JSON.stringify(customer)\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n            .then(_ => setMsg('Updated!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n    const addTraining = (newTraining) => {\n        if (window.confirm('You really want to add?')) {\n            fetch('https://customerrest.herokuapp.com/api/trainings', {\n                method: 'POST',\n                headers: {'Content-type' : 'application/json' },\n                body: JSON.stringify(newTraining)\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getTrainings()}))\n            .then(_ => setMsg('Training added!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n\n    const deleteCustomer = (link) => {\n        if (window.confirm('You really want to delete?')) {\n            fetch(link.links[0].href, {\n                method: 'DELETE'\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n            .then(_ => setMsg('Deleted!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n\n    const closeSnackbar = () => {\n        setOpen(false);\n    }\n\n    const columns = [\n        {\n            headerName: '',\n            width: 170,\n            cellRendererFramework: (row) =>  (\n                <AddTraining addTraining={addTraining} training={row.data} />\n            )},\n        { headerName: 'First name', field: 'firstname', sortable: true, filter: true },\n        { headerName: 'Last name', field: 'lastname', sortable: true, filter: true },\n        { headerName: 'Street address', field: 'streetaddress', sortable: true, filter: true },\n        { headerName: 'Postcode', field: 'postcode', sortable: true, filter: true },\n        { headerName: 'City', field: 'city', sortable: true, filter: true },\n        { headerName: 'Email', field: 'email', sortable: true, filter: true },\n        { headerName: 'Phone', field: 'phone', sortable: true, filter: true },\n        {\n            headerName: '',\n            width: 90,\n            cellRendererFramework: (row) =>  (\n                <EditCustomer updateCustomer={updateCustomer} customer={row.data} />\n            )},\n        {\n            headerName: '',\n            width: 90,\n            cellRendererFramework: (row) => (\n                <Button color=\"secondary\" size=\"small\"\n                onClick={() => deleteCustomer(row.data)}>\n                    Delete\n                </Button>\n            )\n        },\n    ]\n\n    return(\n        <div>\n            <AddCustomer addCustomer={addCustomer} />\n            <div className=\"ag-theme-material\" style={{height:'700px', width:'90%', margin:'auto'}}>\n            <AgGridReact\n                ref={gridRef}\n                suppressCellSelection={true}\n                onGridReady={ params => {\n                    gridRef.current = params.api\n                }}\n                columnDefs={columns}\n                rowData={customers}\n                pagination={true}\n                paginationPageSize={10}\n                animateRows={true}\n                >\n                </AgGridReact>\n                <Snackbar\n                    open={open}\n                    autoHideDuration={3000}\n                    onClose={closeSnackbar}\n                    message={msg}\n                /> \n            </div>\n        </div>\n    );\n}\n\nexport default Customers;","import React, { useState, useEffect } from 'react'\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n \nfunction TrainingsCalendar() {\n\n    const localizer = momentLocalizer(moment)\n    const [trainings, setTrainings] = useState([])\n\n    useEffect(() => {\n        getTrainings()\n    });\n\n    const getTrainings = () => {\n        fetch('https://customerrest.herokuapp.com/gettrainings')\n        .then(response => response.json())\n        .then(data => setTrainings(data.map((training) => (\n            {\n                title: training.activity + ' / ' + \n                    training.customer.firstname + ' ' + \n                    training.customer.lastname + ' ' +\n                    training.duration + 'min',\n                start: moment.utc(training.date)._d,\n                end: moment.utc(training.date).add(training.duration, 'minutes')._d,\n                resource: training.customer.id\n            })\n        )))\n        .catch(err => console.error(err))\n    }\n\n    return (\n        <div className=\"TrainingsCalendar\">\n        <Calendar\n            localizer={localizer}\n            defaultDate={new Date()}\n            defaultView='month'\n            events={trainings}\n            resourceAccessor='resource'\n            startAccessor='start'\n            endAccessor='end'\n            style={{ height: \"75vh\" }}\n        />\n        </div>\n    );\n}\n  \n  export default TrainingsCalendar;","import React, { useState, useEffect } from 'react';\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from \"victory\";\nimport Trainings from './Trainings';\n\nfunction Stats() {\n\n    const [data, setData] = useState([]);\n\n    const url = 'https://customerrest.herokuapp.com/gettrainings'\n\n    useEffect(() => { \n        fetchData()\n    }, []);\n\n    const fetchData = () => {\n        fetch(url)\n        .then(response => response.json())\n        .then(data => setData(data.map((training) => (\n            {\n                activity: training.activity,\n                mins: training.duration\n            })\n        )))\n        .catch(err => console.error(err))\n    }\n\n    return (\n        <div>\n        <VictoryChart domainPadding={20}>\n            <VictoryBar style={{\n                data: { fill: '#c43a31' }\n            }}\n            data={fetchData()} x=\"activity\" y=\"mins\"\n            />\n        </VictoryChart>\n        </div>\n    )\n}\n\nexport default Stats;","import React, { useState } from 'react';\nimport './App.css';\nimport Trainings from './components/Trainings';\nimport Customers from './components/Customers';\nimport Calendar from './components/TrainingsCalendar';\nimport Stats from './components/Stats';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nfunction App() {\n\n  const [value, setValue] = useState('');\n\n  const handleChange = (event, value) => {\n    setValue(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h4\">\n            ** P3rsonal Trainer App **\n          </Typography>\n        </Toolbar>\n        <Tabs value={value} onChange={handleChange} centered>\n          <Tab value=\"customers\" label=\"Customer\" />\n          <Tab value=\"trainings\" label=\"Trainings\" />\n          <Tab value=\"calendar\" label=\"Calendar\" />\n          <Tab value=\"stats\" label=\"Stats\" />\n        </Tabs>\n      </AppBar>\n      {value === 'customers' && <div><Customers /></div>}\n      {value === 'trainings' && <div><Trainings /></div>}\n      {value === 'calendar' && <div><Calendar /></div>}\n      {value === 'stats' && <div><Stats /></div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}