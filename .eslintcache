[{"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/index.js":"1","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/reportWebVitals.js":"2","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/App.js":"3","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Stats.js":"4","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/TrainingsCalendar.js":"5","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Trainings.js":"6","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Customers.js":"7","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/AddCustomer.js":"8","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/AddTraining.js":"9","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/EditCustomer.js":"10"},{"size":500,"mtime":1604918544599,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1604918544616,"results":"13","hashOfConfig":"12"},{"size":1388,"mtime":1608571634164,"results":"14","hashOfConfig":"12"},{"size":973,"mtime":1607681185882,"results":"15","hashOfConfig":"12"},{"size":1501,"mtime":1606648012846,"results":"16","hashOfConfig":"12"},{"size":3600,"mtime":1606309367877,"results":"17","hashOfConfig":"12"},{"size":5584,"mtime":1606648012836,"results":"18","hashOfConfig":"12"},{"size":3809,"mtime":1605365537948,"results":"19","hashOfConfig":"12"},{"size":3050,"mtime":1606309045905,"results":"20","hashOfConfig":"12"},{"size":4209,"mtime":1605522070982,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"hzdg9b",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/index.js",[],["45","46"],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/reportWebVitals.js",[],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/App.js",["47"],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Stats.js",["48","49","50","51"],"import React, { useState, useEffect } from 'react';\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from \"victory\";\nimport Trainings from './Trainings';\n\nfunction Stats() {\n\n    const [data, setData] = useState([]);\n\n    const url = 'https://customerrest.herokuapp.com/gettrainings'\n\n    useEffect(() => { \n        fetchData()\n    }, []);\n\n    const fetchData = () => {\n        fetch(url)\n        .then(response => response.json())\n        .then(data => setData(data.map((training) => (\n            {\n                activity: training.activity,\n                mins: training.duration\n            })\n        )))\n        .catch(err => console.error(err))\n    }\n\n    return (\n        <div>\n        <VictoryChart domainPadding={20}>\n            <VictoryBar style={{\n                data: { fill: '#c43a31' }\n            }}\n            data={fetchData()} x=\"activity\" y=\"mins\"\n            />\n        </VictoryChart>\n        </div>\n    )\n}\n\nexport default Stats;","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/TrainingsCalendar.js",[],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Trainings.js",[],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/Customers.js",["52","53"],"import React, { useState, useEffect, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport { Button } from '@material-ui/core';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport AddCustomer from './AddCustomer';\nimport EditCustomer from './EditCustomer';\nimport AddTraining from './AddTraining';\nimport Trainings from './Trainings';\n\nfunction Customers() {\n\n    const [customers, setCustomers] = useState([]);\n    const [trainings, setTrainings] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [msg, setMsg] = useState('');\n\n    const gridRef = useRef();\n\n    useEffect(() => {\n        getCustomers();\n    }, [])\n\n    const getCustomers = () => {\n        fetch('https://customerrest.herokuapp.com/api/customers/')\n        .then(response => response.json())\n        .then(data => setCustomers(data.content))\n        .catch(err => console.error(err))\n    }\n\n    useEffect(() => {\n        getTrainings();\n    }, [])\n    \n    const getTrainings = () => {\n        fetch('https://customerrest.herokuapp.com/api/trainings')\n        .then(response => response.json())\n        .then(data => setTrainings(data))\n        .catch(err => console.error(err))\n    }\n\n    const addCustomer = (newCustomer) => {\n        fetch('https://customerrest.herokuapp.com/api/customers/', {\n            method: 'POST',\n            headers: {'Content-type' : 'application/json' },\n            body: JSON.stringify(newCustomer)\n        })\n        .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n        .then(_ => setMsg('Added succesfully!'))\n        .then(_ => setOpen(true))\n        .catch(err => console.error(err))\n    }\n\n    const updateCustomer = (link, customer) => {\n        if (window.confirm('You really want to update?')) {\n            fetch(link.links[0].href, {\n                method: 'PUT',\n                headers: {'Content-type' : 'application/json' },\n                body: JSON.stringify(customer)\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n            .then(_ => setMsg('Updated!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n    const addTraining = (newTraining) => {\n        if (window.confirm('You really want to add?')) {\n            fetch('https://customerrest.herokuapp.com/api/trainings', {\n                method: 'POST',\n                headers: {'Content-type' : 'application/json' },\n                body: JSON.stringify(newTraining)\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getTrainings()}))\n            .then(_ => setMsg('Training added!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n\n    const deleteCustomer = (link) => {\n        if (window.confirm('You really want to delete?')) {\n            fetch(link.links[0].href, {\n                method: 'DELETE'\n            })\n            .then(_ => gridRef.current.refreshCells({rowNodes: getCustomers()}))\n            .then(_ => setMsg('Deleted!!!'))\n            .then(_ => setOpen(true))\n            .catch(err => console.error(err))\n        }\n    }\n\n    const closeSnackbar = () => {\n        setOpen(false);\n    }\n\n    const columns = [\n        {\n            headerName: '',\n            width: 170,\n            cellRendererFramework: (row) =>  (\n                <AddTraining addTraining={addTraining} training={row.data} />\n            )},\n        { headerName: 'First name', field: 'firstname', sortable: true, filter: true },\n        { headerName: 'Last name', field: 'lastname', sortable: true, filter: true },\n        { headerName: 'Street address', field: 'streetaddress', sortable: true, filter: true },\n        { headerName: 'Postcode', field: 'postcode', sortable: true, filter: true },\n        { headerName: 'City', field: 'city', sortable: true, filter: true },\n        { headerName: 'Email', field: 'email', sortable: true, filter: true },\n        { headerName: 'Phone', field: 'phone', sortable: true, filter: true },\n        {\n            headerName: '',\n            width: 90,\n            cellRendererFramework: (row) =>  (\n                <EditCustomer updateCustomer={updateCustomer} customer={row.data} />\n            )},\n        {\n            headerName: '',\n            width: 90,\n            cellRendererFramework: (row) => (\n                <Button color=\"secondary\" size=\"small\"\n                onClick={() => deleteCustomer(row.data)}>\n                    Delete\n                </Button>\n            )\n        },\n    ]\n\n    return(\n        <div>\n            <AddCustomer addCustomer={addCustomer} />\n            <div className=\"ag-theme-material\" style={{height:'700px', width:'90%', margin:'auto'}}>\n            <AgGridReact\n                ref={gridRef}\n                suppressCellSelection={true}\n                onGridReady={ params => {\n                    gridRef.current = params.api\n                }}\n                columnDefs={columns}\n                rowData={customers}\n                pagination={true}\n                paginationPageSize={10}\n                animateRows={true}\n                >\n                </AgGridReact>\n                <Snackbar\n                    open={open}\n                    autoHideDuration={3000}\n                    onClose={closeSnackbar}\n                    message={msg}\n                /> \n            </div>\n        </div>\n    );\n}\n\nexport default Customers;","/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/AddCustomer.js",[],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/AddTraining.js",[],"/Users/markuskarjalainen/Desktop/OHTU/FRONT/react/personaltrainer/src/components/EditCustomer.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":2,"column":36,"nodeType":"60","messageId":"61","endLine":2,"endColumn":47},{"ruleId":"58","severity":1,"message":"63","line":2,"column":49,"nodeType":"60","messageId":"61","endLine":2,"endColumn":61},{"ruleId":"58","severity":1,"message":"64","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":17},{"ruleId":"58","severity":1,"message":"65","line":7,"column":12,"nodeType":"60","messageId":"61","endLine":7,"endColumn":16},{"ruleId":"58","severity":1,"message":"64","line":10,"column":8,"nodeType":"60","messageId":"61","endLine":10,"endColumn":17},{"ruleId":"58","severity":1,"message":"66","line":15,"column":12,"nodeType":"60","messageId":"61","endLine":15,"endColumn":21},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Stats' is defined but never used.","Identifier","unusedVar","'VictoryAxis' is defined but never used.","'VictoryTheme' is defined but never used.","'Trainings' is defined but never used.","'data' is assigned a value but never used.","'trainings' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]